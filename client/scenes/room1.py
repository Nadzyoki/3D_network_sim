from ursina import *
from time import perf_counter

scene_parent = Entity()

if __name__ == '__main__':
    app = Ursina()

t = perf_counter()

# unique meshes
meshes = {

'Cube_001' : Mesh(
    vertices=[(0.5884, 12.408, -15.2594), (0.5884, -1.0, 15.6721), (0.5884, -1.0, -15.2594), (0.5884, 12.408, 15.6721), (1.0, -1.0, 15.6721), (0.5884, -1.0, 15.6721), (1.0, 12.408, 15.6721), (1.0, -1.0, -15.2594), (1.0, -1.0, 15.6721), (1.0, 12.408, -15.2594), (0.5884, -1.0, -15.2594), (1.0, -1.0, -15.2594), (1.0, -1.0, 15.6721), (0.5884, -1.0, -15.2594), (0.5884, -1.0, 15.6721), (0.5884, 12.408, 15.6721), (1.0, 12.408, -15.2594), (1.0, 12.408, 15.6721), (0.5884, 12.408, -15.2594), (0.5884, 12.408, 15.6721), (0.5884, -1.0, 15.6721), (0.5884, 12.408, 15.6721), (1.0, 12.408, 15.6721), (1.0, -1.0, 15.6721), (1.0, 12.408, 15.6721), (1.0, 12.408, -15.2594), (1.0, -1.0, -15.2594), (1.0, 12.408, -15.2594), (0.5884, 12.408, -15.2594), (0.5884, -1.0, -15.2594), (1.0, -1.0, 15.6721), (1.0, -1.0, -15.2594), (0.5884, -1.0, -15.2594), (0.5884, 12.408, 15.6721), (0.5884, 12.408, -15.2594), (1.0, 12.408, -15.2594)],
    normals=[(-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245)],
    colors=[],
    uvs=[(0.625, 0.0), (0.375, 0.25), (0.375, 0.0), (0.625, 0.25), (0.375, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 1.0), (0.375, 0.75), (0.375, 0.5), (0.125, 0.75), (0.125, 0.5), (0.875, 0.5), (0.625, 0.75), (0.625, 0.5), (0.625, 0.0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1.0), (0.375, 1.0), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)],
),

'Cube_002' : Mesh(
    vertices=[(0.5884, 12.408, -15.2594), (0.5884, -1.0, 15.6721), (0.5884, -1.0, -15.2594), (0.5884, 12.408, 15.6721), (1.0, -1.0, 15.6721), (0.5884, -1.0, 15.6721), (1.0, 12.408, 15.6721), (1.0, -1.0, -15.2594), (1.0, -1.0, 15.6721), (1.0, 12.408, -15.2594), (0.5884, -1.0, -15.2594), (1.0, -1.0, -15.2594), (1.0, -1.0, 15.6721), (0.5884, -1.0, -15.2594), (0.5884, -1.0, 15.6721), (0.5884, 12.408, 15.6721), (1.0, 12.408, -15.2594), (1.0, 12.408, 15.6721), (0.5884, 12.408, -15.2594), (0.5884, 12.408, 15.6721), (0.5884, -1.0, 15.6721), (0.5884, 12.408, 15.6721), (1.0, 12.408, 15.6721), (1.0, -1.0, 15.6721), (1.0, 12.408, 15.6721), (1.0, 12.408, -15.2594), (1.0, -1.0, -15.2594), (1.0, 12.408, -15.2594), (0.5884, 12.408, -15.2594), (0.5884, -1.0, -15.2594), (1.0, -1.0, 15.6721), (1.0, -1.0, -15.2594), (0.5884, -1.0, -15.2594), (0.5884, 12.408, 15.6721), (0.5884, 12.408, -15.2594), (1.0, 12.408, -15.2594)],
    normals=[(-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245)],
    colors=[],
    uvs=[(0.625, 0.0), (0.375, 0.25), (0.375, 0.0), (0.625, 0.25), (0.375, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 1.0), (0.375, 0.75), (0.375, 0.5), (0.125, 0.75), (0.125, 0.5), (0.875, 0.5), (0.625, 0.75), (0.625, 0.5), (0.625, 0.0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1.0), (0.375, 1.0), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)],
),

'Cube_003' : Mesh(
    vertices=[(0.5884, 12.408, -15.2594), (0.5884, -1.0, 15.6721), (0.5884, -1.0, -15.2594), (0.5884, 12.408, 15.6721), (1.0, -1.0, 15.6721), (0.5884, -1.0, 15.6721), (1.0, 12.408, 15.6721), (1.0, -1.0, -15.2594), (1.0, -1.0, 15.6721), (1.0, 12.408, -15.2594), (0.5884, -1.0, -15.2594), (1.0, -1.0, -15.2594), (1.0, -1.0, 15.6721), (0.5884, -1.0, -15.2594), (0.5884, -1.0, 15.6721), (0.5884, 12.408, 15.6721), (1.0, 12.408, -15.2594), (1.0, 12.408, 15.6721), (0.5884, 12.408, -15.2594), (0.5884, 12.408, 15.6721), (0.5884, -1.0, 15.6721), (0.5884, 12.408, 15.6721), (1.0, 12.408, 15.6721), (1.0, -1.0, 15.6721), (1.0, 12.408, 15.6721), (1.0, 12.408, -15.2594), (1.0, -1.0, -15.2594), (1.0, 12.408, -15.2594), (0.5884, 12.408, -15.2594), (0.5884, -1.0, -15.2594), (1.0, -1.0, 15.6721), (1.0, -1.0, -15.2594), (0.5884, -1.0, -15.2594), (0.5884, 12.408, 15.6721), (0.5884, 12.408, -15.2594), (1.0, 12.408, -15.2594)],
    normals=[(-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245)],
    colors=[],
    uvs=[(0.625, 0.0), (0.375, 0.25), (0.375, 0.0), (0.625, 0.25), (0.375, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 1.0), (0.375, 0.75), (0.375, 0.5), (0.125, 0.75), (0.125, 0.5), (0.875, 0.5), (0.625, 0.75), (0.625, 0.5), (0.625, 0.0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1.0), (0.375, 1.0), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)],
),

'Cube_004' : Mesh(
    vertices=[(0.5884, 12.408, -15.2594), (0.5884, -1.0, 15.6721), (0.5884, -1.0, -15.2594), (0.5884, 12.408, 15.6721), (1.0, -1.0, 15.6721), (0.5884, -1.0, 15.6721), (1.0, 12.408, 15.6721), (1.0, -1.0, -15.2594), (1.0, -1.0, 15.6721), (1.0, 12.408, -15.2594), (0.5884, -1.0, -15.2594), (1.0, -1.0, -15.2594), (1.0, -1.0, 15.6721), (0.5884, -1.0, -15.2594), (0.5884, -1.0, 15.6721), (0.5884, 12.408, 15.6721), (1.0, 12.408, -15.2594), (1.0, 12.408, 15.6721), (0.5884, 12.408, -15.2594), (0.5884, 12.408, 15.6721), (0.5884, -1.0, 15.6721), (0.5884, 12.408, 15.6721), (1.0, 12.408, 15.6721), (1.0, -1.0, 15.6721), (1.0, 12.408, 15.6721), (1.0, 12.408, -15.2594), (1.0, -1.0, -15.2594), (1.0, 12.408, -15.2594), (0.5884, 12.408, -15.2594), (0.5884, -1.0, -15.2594), (1.0, -1.0, 15.6721), (1.0, -1.0, -15.2594), (0.5884, -1.0, -15.2594), (0.5884, 12.408, 15.6721), (0.5884, 12.408, -15.2594), (1.0, 12.408, -15.2594)],
    normals=[(-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245)],
    colors=[],
    uvs=[(0.625, 0.0), (0.375, 0.25), (0.375, 0.0), (0.625, 0.25), (0.375, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 1.0), (0.375, 0.75), (0.375, 0.5), (0.125, 0.75), (0.125, 0.5), (0.875, 0.5), (0.625, 0.75), (0.625, 0.5), (0.625, 0.0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1.0), (0.375, 1.0), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)],
),

'Plane' : Mesh(
    vertices=[(1.0, 0.0, -1.0), (-1.0, 0.0, 1.0), (-1.0, 0.0, -1.0), (1.0, 0.0, -1.0), (1.0, 0.0, 1.0), (-1.0, 0.0, 1.0)],
    normals=[(0.0, 1.0, 0.0), (0.0, 1.0, 0.0), (0.0, 1.0, 0.0), (0.0, 1.0, 0.0), (0.0, 1.0, 0.0), (0.0, 1.0, 0.0)],
    colors=[],
    uvs=[(1.0, 0.0), (0.0, 1.0), (0.0, 0.0), (1.0, 0.0), (1.0, 1.0), (0.0, 1.0)],
),
}
print('loaded models:', perf_counter() - t)
t = perf_counter()

scene_parent.Cube = Entity(
    name='Cube',
    parent=scene_parent,
    position=Vec3(-16.2953, 0.74973, 0.0),
    rotation=(-0.0, -0.0, -0.0),
    scale=Vec3(1.0, 1.0, 1.0),
    model=copy(meshes['Cube_001']),
    ignore=True,
    )
scene_parent.Cube_001 = Entity(
    name='Cube.001',
    parent=scene_parent,
    position=Vec3(14.74085, 0.74973, 0.0),
    rotation=(-0.0, -0.0, -0.0),
    scale=Vec3(1.0, 1.0, 1.0),
    model=copy(meshes['Cube_002']),
    ignore=True,
    )
scene_parent.Cube_002 = Entity(
    name='Cube.002',
    parent=scene_parent,
    position=Vec3(-0.01434, 0.74973, 14.80206),
    rotation=(-0.0, -90.0, -0.0),
    scale=Vec3(1.0, 1.0, 1.0),
    model=copy(meshes['Cube_003']),
    ignore=True,
    )
scene_parent.Cube_003 = Entity(
    name='Cube.003',
    parent=scene_parent,
    position=Vec3(-0.01434, 0.74973, -16.12177),
    rotation=(-0.0, -90.0, -0.0),
    scale=Vec3(1.0, 1.0, 1.0),
    model=copy(meshes['Cube_004']),
    ignore=True,
    )
scene_parent.ground = Entity(
    name='ground',
    parent=scene_parent,
    position=Vec3(0.0, 0.0, 0.0),
    rotation=(-0.0, -0.0, -0.0),
    scale=Vec3(15.63518, 15.63518, 15.63518),
    model=copy(meshes['Plane']),
    ignore=True,
    )
print('created entities:', perf_counter() - t)
if __name__ == '__main__':
    EditorCamera()
    app.run()
